name: Build & Publish to Release

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Install Dependency
        run: go get

      - name: Create Build Directory
        run: mkdir build

      - name: Build for Darwin
        run: CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -a -o build/server_darwin_x64

      - name: Build for Linux x64
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o build/server_linux_x64

      - name: Build for Linux x86
        run: CGO_ENABLED=0 GOOS=linux GOARCH=386 go build -a -o build/server_linux_x86

      - name: Build for Windows x64
        run: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -a -o build/server_windows_x64.exe

      - name: Build for Windows x86
        run: CGO_ENABLED=0 GOOS=windows GOARCH=386 go build -a -o build/server_windows_x86.exe

      - name: Check Files
        run: ls -al . && ls -al build/

      - name: Zip Build file for Darwin
        run: mv build/server_darwin_x64 ./server && zip server_darwin_x64.zip server && rm -rf server

      - name: Zip Build file for Linux x64
        run: mv build/server_linux_x64 ./server && zip server_linux_x64.zip server && rm -rf server

      - name: Zip Build file for Linux x86
        run: mv build/server_linux_x86 ./server && zip server_linux_x86.zip server && rm -rf server

      - name: Zip Build file for Windows x64
        run: mv build/server_windows_x64.exe ./server.exe && zip server_windows_x64.exe.zip server.exe && rm -rf server.exe

      - name: Zip Build file for Windows x86
        run: mv build/server_windows_x86.exe ./server.exe && zip server_windows_x86.exe.zip server.exe && rm -rf server.exe

      - name: Set Version
        run: echo "::set-output name=version::$(echo ${{ github.sha }} | cut -c -6)"
        id: version

      - name: Set Release Name
        run: echo "::set-output name=release_name::$(echo ${{ github.sha }} | cut -c -6)"
        id: release_name

      - uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.release_name }}
          tag_name: ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Darwin Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: server_darwin_x64.zip
          asset_name: server_darwin_x64.zip
          asset_content_type: application/zip

      - name: Upload Linux x64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: server_linux_x64.zip
          asset_name: server_linux_x64.zip
          asset_content_type: application/zip

      - name: Upload Linux x86 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: server_linux_x86.zip
          asset_name: server_linux_x86.zip
          asset_content_type: application/zip

      - name: Upload Windows x64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: server_windows_x64.exe.zip
          asset_name: server_windows_x64.exe.zip
          asset_content_type: application/zip

      - name: Upload Windows x86 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: server_windows_x86.exe.zip
          asset_name: server_windows_x86.exe.zip
          asset_content_type: application/zip
